#-*- coding:utf-8 -*-
'''
일단 하나의 문단은 여러개의 문장으로 이루어져있다.
그리고 문장은 .(마침표) 를 기준으로 나누어진다.
'''

paragraph = "사람들은 익명의 공간에서 실명 대신 대화명으로 존재한다. 그러나 은연중에 그 이름에 자신의 정보를 담곤 한다. 이 소설의 주인공은 양파 수프를 가장 좋아하는 프랑스 요리사 출신의 남자다. 그의 PC통신 대화명은 바로 ‘착한 스프’. 여기에는 남자의 가족사와 삶에 대한 소박한 꿈이 담겨 있다. 20대의 마지막 절반을 ‘착한 스프’와 함께 보내는 ‘우체통’(홍아)과 ‘제인’(현수), 이들은 PC통신이라는 익명의 공간에서 대화를 나누다 실명의 세계에서 만남을 가지면서 엇갈린 사랑과 운명에 맞닥뜨린다. 1990년대 중반을 배경으로 전개되는 이 소설에서 주요 소통 수단인 PC통신은 구시대의 아이콘이지만 익명의 누군가와 관계를 갖는다는 점에서 오늘날을 사는 사람들에게도 전혀 낯설지 않다. 그들은 자신의 속내를 잘 알지 못하는 인간에게 털어놓는 것을 더 선호한다. 관계란 객관적이 되면 관대하기 때문이다. 그러면서 인간은 자신과 자신을 잘 아는 이웃으로부터 소외되고 자신조차도 진지하게 들여다보지 않게 되면서 다른 사람을 사랑할 수 없게 된다. 그리고 온라인에서 익숙했던 피상적인 관계가 오프라인으로 이어지면서 시간차가 생긴다."
print("")
print("1. 예시문단")
print(paragraph)

'''
split() 이라는 함수를 이용하여 나눠줄수 있다.
먼저 paragraph를 .(마침표)를 기준으로 나눠준다.
-> paragraph.split(".")

나눠진 값들은 map이라는 함수를 이용해 저장한다.
이 map이라는 자료형을 함께 명시해줘야한다.
그래서 문자열, 즉 str이라고 명시해준다.
-> map(str, paragraph.split("."))

그리고 이 map형태의 데이터를 list로 바꿔준다.
-> list(map(str, paragraph.split(".")))
'''
sentences = list(map(str, paragraph.split(".")))
print("")
print("2. 문장으로 나누기")
print(sentences)

'''
찾는 방법은 의외로 간단하다.
다른 언어로 작성시 페이징같은 비교적 복잡한 알고리즘이 요구되지만
파이썬에선 한줄로 해결이 가능하다.
'''
word = "사랑" #찾고자하는 단어
ret = [] #찾고자하는 단어가 포함된 문장들을 담을 리스트
for sentence in sentences:
    if word in sentence:
        ret.append(sentence)
print("")
print("3. 찾고자하는 단어가 포함된 문장들")
for elem in ret:
    print(elem)
